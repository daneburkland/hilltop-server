generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model FlowRun {
  id             Int      @default(autoincrement()) @id
  flow           Flow     @relation(fields: [flowId], references: [id])
  flowId         Int
  result         String
  code           String
  createdAt      DateTime @default(now())
  logs           Log[]
  screenshotUrls String[]
}

model Flow {
  id        Int       @default(autoincrement()) @id
  title     String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  code      String
  runs      FlowRun[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model User {
  id       String    @id
  email    String    @unique
  name     String
  flow     Flow[]
  apiKey   ApiKey?
  team     Team      @relation(fields: [teamId], references: [id])
  teamId   Int
  webhooks Webhook[]
}

model Team {
  id      Int    @default(autoincrement()) @id
  name    String
  members User[]
}

model ApiKey {
  hashed String @unique
  prefix String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Log {
  id    Int     @default(autoincrement()) @id
  run   FlowRun @relation(fields: [runId], references: [id])
  runId Int
  level String
  msg   String
  stack String?
}

model Webhook {
  id        Int    @default(autoincrement()) @id
  resource  String
  owner     User   @relation(fields: [ownerId], references: [id])
  event     Event  @relation(fields: [eventNoun, eventVerb], references: [noun, verb])
  ownerId   String
  url       String
  eventNoun Noun
  eventVerb Verb
}

enum Noun {
  Flow
}

enum Verb {
  created
  updated
  executed
  errored
}

model Event {
  noun     Noun      @default(Flow)
  verb     Verb
  webhooks Webhook[]
  @@id([noun, verb])
}
